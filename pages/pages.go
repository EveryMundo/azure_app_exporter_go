/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package pages

import (
	"azure_app_exporter/azure/applications"
	"bytes"
	_ "embed"
	"net/http"

	fromswaggerui "azure_app_exporter/fromSwaggerUi"

	"github.com/labstack/echo/v4"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/common/expfmt"
)

//go:embed licenses.csv
var licenses string

// @summary Show the Prometheus metrics (truncated in Swagger UI to 20KiB)
// @description Show the Prometheus metrics (truncated in Swagger UI to 20KiB)
// @description
// @description Call this endpoint outside Swagger UI to see full response
// @tags metrics
// @produce plain
// @success 200 {object} string
// @router /metrics [get]
func Metrics(c echo.Context) error {
	applications.UpdateApplicationsMetrics()

	metrics, _ := prometheus.DefaultGatherer.Gather()
	var buffer bytes.Buffer
	for _, metric := range metrics {
		expfmt.MetricFamilyToText(&buffer, metric)
	}

	if _, fromUi := c.Request().Header[fromswaggerui.HeaderName]; fromUi {
		buffer.Truncate(min(buffer.Len(), 1024*20))
	}

	return c.Blob(http.StatusOK, "text/plain", buffer.Bytes())
}

// @summary Show licenses
// @description Show licenses
// @description
// @description Generated by go-licenses
// @tags info
// @produce plain
// @produce application/csv
// @success 200 {object} string
// @router /licenses [get]
func Licenses(c echo.Context) error {
	c.Response().Header().Set(echo.HeaderContentType, "application/csv")
	return c.String(http.StatusOK, licenses)
}
